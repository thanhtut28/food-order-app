// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  email     String   @unique
  username  String   @unique
  password  String
  orders    Order[]
  cart      Cart?
  // TODO: to fix foreign key constraint error while deleting
  //! To check again becoz it may be worked properly at the last time.
}

model MenuItem {
  id              Int              @id @default(autoincrement())
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  name            String           @unique
  photo           String
  price           Float
  categoryId      Int
  category        Category         @relation(fields: [categoryId], references: [id])
  cartItems       CartItem[]
  orderItems      OrderItem[]
  ingredientItems IngreidentItem[]
}

model CartItem {
  quantity   Int
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  total      Float

  @@id(fields: [cartId, menuItemId])
}

model OrderItem {
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])

  //TODO: needs to prisma generate

  @@id(fields: [menuItemId, orderId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  updatedAt  DateTime    @updatedAt
  createdAt  DateTime    @default(now())
  total      Float
  active     Boolean
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  //TODO: may be needed to add onDelete: Cascade
  orderItems OrderItem[]
}

model Category {
  id        Int        @id @default(autoincrement())
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  name      String     @unique
  menuItems MenuItem[]
}

model Ingredient {
  id              Int              @id @default(autoincrement())
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  name            String           @unique
  ingredientItems IngreidentItem[]
}

model IngreidentItem {
  id           Int        @id @default(autoincrement())
  order        Int
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  menuItemId   Int
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id])
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  //* To prevent duplicate order in a single menu item
  @@unique([order, menuItemId])
}
